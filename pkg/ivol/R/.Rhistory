class(ret) <- "ivol"
return(ret)
}
imom(otm)
library(ivol)
rm(imom)
?imom
imom(otm)
imom <- function(data, use_names=TRUE, moneyness){
mn <- moneyness/100 - 1
df <- as.matrix(data)
ret <- list()
r2 <- r <- c()
nn <- nrow(df)
mom <- matrix(NA, nn, 3)
colnames(mom) <- c("sigma", "skew", "kurt")
x <- cbind(1, mn, mn^2)
for(i in 1:nn){
y <- df[i,]
mdl <- lm.fit(x, y)
f <- mdl$fitted.values
m <- mean(y)
r2[i] <- sum((f - m)^2) / sum((y -m)^2)
mom[i,] <- mdl$coefficients
r <- c(r, mdl$residuals)
}
ret$r.squared <- r2
ret$mom <- mom
ret$residuals <- r
ret$method <- "mom_gramchalier"
ret$last_mdl <- mdl$fitted.values
class(ret) <- "ivol"
return(ret)
}
imom(otm)
head(otm)
data <- otm
mn <- colnames(data)
mn
as.numeric(mn)
mn[grep('[0-9]+',mn)]
grep('[0-9]+',mn)
gsub("[^0-9.]", "",  mn)
mn <- as.numeric(mn)
mn <- colnames(data)
mn <- gsub("[^0-9.]", "",  mn)
mn <- as.numeric(mn)
mn
min(mn)
if(min(mn) > 10)
imom <- function(data, use_names=TRUE, moneyness){
if(use_names == T){
mn <- colnames(data)
mn <- gsub("[^0-9.]", "",  mn)
mn <- as.numeric(mn)
}
if(min(mn) > 10){
mn <- moneyness/100
}
mn <- mn - 1
df <- as.matrix(data)
ret <- list()
r2 <- r <- c()
nn <- nrow(df)
mom <- matrix(NA, nn, 3)
colnames(mom) <- c("sigma", "skew", "kurt")
x <- cbind(1, mn, mn^2)
for(i in 1:nn){
y <- df[i,]
mdl <- lm.fit(x, y)
f <- mdl$fitted.values
m <- mean(y)
r2[i] <- sum((f - m)^2) / sum((y -m)^2)
mom[i,] <- mdl$coefficients
r <- c(r, mdl$residuals)
}
ret$r.squared <- r2
ret$mom <- mom
ret$residuals <- r
ret$method <- "mom_gramchalier"
ret$last_mdl <- mdl$fitted.values
class(ret) <- "ivol"
return(ret)
}
rm(mn)
rm(data)
mdl <- imom(otm)
imom <- function(data, use_names=TRUE, moneyness=NA){
if(use_names == T){
mn <- colnames(data)
mn <- gsub("[^0-9.]", "",  mn)
mn <- as.numeric(mn)
}
if(min(mn) > 10){
mn <- moneyness/100
}
mn <- mn - 1
df <- as.matrix(data)
ret <- list()
r2 <- r <- c()
nn <- nrow(df)
mom <- matrix(NA, nn, 3)
colnames(mom) <- c("sigma", "skew", "kurt")
x <- cbind(1, mn, mn^2)
for(i in 1:nn){
y <- df[i,]
mdl <- lm.fit(x, y)
f <- mdl$fitted.values
m <- mean(y)
r2[i] <- sum((f - m)^2) / sum((y -m)^2)
mom[i,] <- mdl$coefficients
r <- c(r, mdl$residuals)
}
ret$r.squared <- r2
ret$mom <- mom
ret$residuals <- r
ret$method <- "mom_gramchalier"
ret$last_mdl <- mdl$fitted.values
class(ret) <- "ivol"
return(ret)
}
imom(otm)
imom <- function(data, use_names=TRUE, moneyness=NA){
if(use_names == T){
mn <- colnames(data)
mn <- gsub("[^0-9.]", "",  mn)
mn <- as.numeric(mn)
} else {
mn <- moneyness
}
if(min(mn) > 10){
mn <- mn/100
}
mn <- mn - 1
df <- as.matrix(data)
ret <- list()
r2 <- r <- c()
nn <- nrow(df)
mom <- matrix(NA, nn, 3)
colnames(mom) <- c("sigma", "skew", "kurt")
x <- cbind(1, mn, mn^2)
for(i in 1:nn){
y <- df[i,]
mdl <- lm.fit(x, y)
f <- mdl$fitted.values
m <- mean(y)
r2[i] <- sum((f - m)^2) / sum((y -m)^2)
mom[i,] <- mdl$coefficients
r <- c(r, mdl$residuals)
}
ret$r.squared <- r2
ret$mom <- mom
ret$residuals <- r
ret$method <- "mom_gramchalier"
ret$last_mdl <- mdl$fitted.values
class(ret) <- "ivol"
return(ret)
}
mdl <- imom(otm)
View(mdl)
plot(mdl)
plot.ivol <- function(x, ...){
if(x$method == "h_lm"){
par(mfrow=c(2, 1))
plot(x$h, type='l', ylab = "implied Hurst", xlab = "time", ylim=c(0,1))
abline(0.5, 0)
plot(x$sigma_f, type='l', ylab = "fractal Volatility", xlab = "time", ylim=c(0, max(x$sigma_f)*1.05))
par(mfrow=c(1, 1))
}
}
summary.ivol <- function(object, ...){
z <- object
r2 <- z$r.squared
r <- z$residuals
met <- z$method
z$r.squared <- z$residuals <- z$method <- NULL
qq <- quantile(r2, c(0, 0.25, 0.5, 0.75, 1))
rr <- quantile(r, c(0, 0.25, 0.5, 0.75, 1))
names(qq) <- names(rr) <- c("Min", "1Q", "Median", "3Q", "Max")
m <- sapply(z, mean)
s <- sapply(z, sd)
ss <- round(cbind(m, s), 3)
colnames(ss) <- c("avg.", "sd.")
if(met == "h_lm"){
cat("\nCall:\nimplied Hurst time series: lm approach\n\nCoefficients: \n")
} else {
cat("\nCall:\nimplied Moments time series: quadratic approach\n\nCoefficients: \n")
}
print(ss)
cat("\nResiduals:\n")
print(round(rr, 3))
cat("\nR squared: \n")
round(qq, 3)
}
predict.ivol <- function(object, newdata, horizon, ...){
z <- object
if(missing(horizon) || is.null(horizon)){
hz <- names(z$last_mdl)
hz <- as.numeric(gsub("T", "", hz))
} else {
hz <- horizon
}
if(missing(newdata) || is.null(newdata)){
y <- exp(z$last_mdl[1])
h <- z$h[length(z$h)]
} else {
y <-  newdata[1]
h <- newdata[2]
}
pr <- y * hz^(h-0.5)
names(pr) <- hz
pr
}
plot(mdl)
class(mdl)
plot.ivol <- function(x, ...){
if(x$method == "h_lm"){
par(mfrow=c(2, 1))
plot(x$h, type='l', ylab = "implied Hurst", xlab = "time", ylim=c(0,1))
abline(0.5, 0)
plot(x$sigma_f, type='l', ylab = "fractal Volatility", xlab = "time", ylim=c(0, max(x$sigma_f)*1.05))
par(mfrow=c(1, 1))
}
}
View(mdl)
View(mdl$mom)
View(otm)
imom <- function(data, use_names=TRUE, moneyness=NA){
if(use_names == T){
mn <- colnames(data)
mn <- gsub("[^0-9.]", "",  mn)
mn <- as.numeric(mn)
} else {
mn <- moneyness
}
if(min(mn) > 10){
mn <- mn/100
}
mn <- mn - 1
df <- as.matrix(data)
ret <- list()
r2 <- r <- c()
nn <- nrow(df)
mom <- matrix(NA, nn, 3)
colnames(mom) <- c("sigma", "skew", "kurt")
x <- cbind(1, mn, mn^2)
for(i in 1:nn){
y <- df[i,]
mdl <- lm.fit(x, y)
f <- mdl$fitted.values
m <- mean(y)
r2[i] <- sum((f - m)^2) / sum((y -m)^2)
mom[i,] <- mdl$coefficients
r <- c(r, mdl$residuals)
}
rownames(mom) <- rownames(data)
ret$r.squared <- r2
ret$mom <- mom
ret$residuals <- r
ret$method <- "mom_gramchalier"
ret$last_mdl <- mdl$fitted.values
class(ret) <- "ivol"
return(ret)
}
mdl <- imom(otm)
View(mdl$mom)
df <- mdl$mom
View(df)
plot(df[,1])
plot(df[,1])
plot(df[,2])
plot(df[,3])
par(mfrow=c(1, 1))
plot(x = rownames(df), y=df[,1])
rownames(df)
plot(as.xts(df))
plot.ivol <- function(x, ...){
if(x$method == "h_lm"){
par(mfrow=c(2, 1))
plot(x$h, type='l', ylab = "implied Hurst", xlab = "time", ylim=c(0,1))
abline(0.5, 0)
plot(x$sigma_f, type='l', ylab = "fractal Volatility", xlab = "time", ylim=c(0, max(x$sigma_f)*1.05))
par(mfrow=c(1, 1))
} else {
par(mfrow=c(1, 1))
des <- c("2nd Moment (Volatility)", "3rd Moment (Skewness)", "4th Moment (Kurtosis)")
for(i in 1:3){
plot(x[,i], type='l', ylab = des[i], xlab = "time")
abline(0, 0)
}
}
}
plot(mdl)
par(mfrow=c(1, 1))
des <- c("2nd Moment (Volatility)", "3rd Moment (Skewness)", "4th Moment (Kurtosis)")
i <- 1
plot(x[,i], type='l', ylab = des[i], xlab = "time")
x <- df
plot(x[,i], type='l', ylab = des[i], xlab = "time")
x <- df
des <- c("Volatility", "Skewness", "Kurtosis")
for(i in 1:3){
plot(x[,i], type='l', ylab = des[i], xlab = "time", main = paste("Moment", i+1))
abline(0, 0)
}
imom <- function(data, use_names=TRUE, moneyness=NA){
if(use_names == T){
mn <- colnames(data)
mn <- gsub("[^0-9.]", "",  mn)
mn <- as.numeric(mn)
} else {
mn <- moneyness
}
if(min(mn) > 10){
mn <- mn/100
}
mn <- mn - 1
df <- as.matrix(data)
ret <- list()
r2 <- r <- c()
nn <- nrow(df)
mom <- matrix(NA, nn, 3)
colnames(mom) <- c("sigma", "skew", "kurt")
x <- cbind(1, mn, mn^2)
for(i in 1:nn){
y <- df[i,]
mdl <- lm.fit(x, y)
f <- mdl$fitted.values
m <- mean(y)
r2[i] <- sum((f - m)^2) / sum((y -m)^2)
mom[i,] <- mdl$coefficients
r <- c(r, mdl$residuals)
}
rownames(mom) <- rownames(data)
ret$r.squared <- r2
ret$mom <- mom
ret$residuals <- r
ret$method <- "mom_gramchalier"
ret$last_mdl <- mdl$fitted.values
class(ret) <- "ivol"
return(ret)
}
load("~/OneDrive/Dokumente/_PhD/Pflicht Module/R Statistic/ivol/data/ivol_otm.RData")
mdl <- imom(otm)
summary(mdl)
plot(mdl)
plot.ivol <- function(x, ...){
if(x$method == "h_lm"){
par(mfrow=c(2, 1))
plot(x$h, type='l', ylab = "implied Hurst", xlab = "time", ylim=c(0,1))
abline(0.5, 0)
plot(x$sigma_f, type='l', ylab = "fractal Volatility", xlab = "time", ylim=c(0, max(x$sigma_f)*1.05))
par(mfrow=c(1, 1))
} else {
des <- c("Volatility", "Skewness", "Kurtosis")
for(i in 1:3){
plot(x[,i], type='l', ylab = des[i], xlab = "time", main = paste("Moment", i+1))
abline(0, 0)
}
}
}
plot(mdl)
plot(mdl)
View(mdl)
plot.ivol <- function(x, ...){
if(x$method == "h_lm"){
par(mfrow=c(2, 1))
plot(x$h, type='l', ylab = "implied Hurst", xlab = "time", ylim=c(0,1))
abline(0.5, 0)
plot(x$sigma_f, type='l', ylab = "fractal Volatility", xlab = "time", ylim=c(0, max(x$sigma_f)*1.05))
par(mfrow=c(1, 1))
} else {
des <- c("Volatility", "Skewness", "Kurtosis")
for(i in 1:3){
plot(x$mom[,i], type='l', ylab = des[i], xlab = "time", main = paste("Moment", i+1))
abline(0, 0)
}
}
}
plot(mdl)
predict(ivol)
predict(mdl)
load("~/OneDrive/Dokumente/_PhD/Pflicht Module/R Statistic/ivol/data/ivol_atm.RData")
ihurst(atm)
data <- atm
tau <- colnames(data)
tau
tau <- gsub("[^0-9.]", "",  tau)
tau
ihurst <- function(data, use_names=TRUE, maturities=NA){
if(use_names == T){
tau <- colnames(data)
tau <- gsub("[^0-9.]", "",  tau)
tau <- as.numeric(tau)
} else {
tau <- maturities
}
df <- log(as.matrix(data))
ret <- list()
h <- sigma <- r2 <- r <- c()
x <- cbind(1, log(tau))
df <- as.matrix(df)
for(i in 1:nrow(df)){
y <- df[i,]
mdl <- lm.fit(x, y)
f <- mdl$fitted.values
m <- mean(y)
r2[i] <- sum((f - m)^2) / sum((y -m)^2)
h[i] <- mdl$coefficients[2] + 0.5
sigma[i] <- exp(mdl$coefficients[1])
# hier kann evt runtime verbessert werden:
r <- c(r, mdl$residuals)
}
ret$r.squared <- r2
ret$h <- h
ret$sigma_f <- sigma
ret$residuals <- r
ret$method <- "h_lm"
ret$last_mdl <- mdl$fitted.values
class(ret) <- "ivol"
return(ret)
}
ihurst(atm)
mdl <- ihurst(atm)
plot(mdl)
plot.ivol <- function(x, ...){
if(x$method == "h_lm"){
plot(x$h, type='l', ylab = "implied Hurst", xlab = "time", ylim=c(0,1))
abline(0.5, 0)
plot(x$sigma_f, type='l', ylab = "fractal Volatility", xlab = "time", ylim=c(0, max(x$sigma_f)*1.05))
} else {
des <- c("Volatility", "Skewness", "Kurtosis")
for(i in 1:3){
plot(x$mom[,i], type='l', ylab = des[i], xlab = "time", main = paste("Moment", i+1))
abline(0, 0)
}
}
}
plot(mdl)
plot.ivol <- function(x, ...){
if(x$method == "h_lm"){
plot(x$h, type='l', ylab = "iH", xlab = "time", ylim=c(0,1), main = "implied Hurst")
abline(0.5, 0)
plot(x$sigma_f, type='l', ylab = "fVola", xlab = "time", ylim=c(0, max(x$sigma_f)*1.05), main = "fractal Volatility")
} else {
des <- c("Volatility", "Skewness", "Kurtosis")
for(i in 1:3){
plot(x$mom[,i], type='l', ylab = des[i], xlab = "time", main = paste("Moment", i+1))
abline(0, 0)
}
}
}
plot(mdl)
summary(mdl)
mdl$residuals
View(mdl$residuals)
View(mdl)
mdl$h
data(otm)
library(devtools)
buils()
build()
check("ivol")
check()
check()
check()
load("~/OneDrive/Dokumente/_PhD/Pflicht Module/R Statistic/ivol/data/ivol_otm.RData")
View(otm)
View(otm)
View(otm)
load("~/OneDrive/Dokumente/_PhD/Pflicht Module/R Statistic/ivol/R/ivol.R")
load("~/OneDrive/Dokumente/_PhD/Pflicht Module/R Statistic/ivol/data/ivol_atm.RData")
View(atm)
check()
build()
check()
check()
check()
build()
check()
check()
load("~/OneDrive/Dokumente/_PhD/Pflicht Module/R Statistic/ivol/data/atm.RData")
rm(.Random.seed)
save.image("~/OneDrive/Dokumente/_PhD/Pflicht Module/R Statistic/ivol/data/atm.RData")
load("~/OneDrive/Dokumente/_PhD/Pflicht Module/R Statistic/ivol/data/otm.RData")
rm(.Random.seed)
save.image("~/OneDrive/Dokumente/_PhD/Pflicht Module/R Statistic/ivol/data/otm.RData")
check()
build()
library("ivol")
?ihurst
install.packages("ivol")
install.packages("ivol")
install.packages("~/OneDrive/Dokumente/_PhD/Pflicht Module/R Statistic/ivol_0.0-1.tar.gz", repos = NULL, type = "source")
library(ivol)
?ihurst
?ivol
?imom
data("otm")
x <- imom(otm)
plot(x)
x$mom
x$mom
data(atm)
x <- ihurst(atm)
plot(x)
plot(x)
check()
data(atm)
x <- ihurst(atm)
plot(x)
x$h
